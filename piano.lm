   ;
   ; TODO convertire i for ... next in do ... loop con decremento
   ;

   processor 6502

   include <macros.lm>
   include <macros_16.lm>
   include <c64.lm>

   org BASIC_RAM

   basic start compact
       10 nsid={(NVOCI/3)}
       20 dim sid(nsid),sid$(nsid)
       21 sid$(0)="d400"
       22 sid$(1)="d420"
       23 gosub 50000
       30 dim wf$(3)
       31 wf$(0)=chr$(206)+chr$(205)
       32 wf$(1)=chr$(206)+chr$(180)
       33 wf$(2)=chr$(207)+chr$(204)
       34 wf$(3)=chr$(166)+chr$(166)
       80 h$=chr$(157)
       90 w=1:rem waveform 0-3
       92 a=5:rem attack 0-15
       93 d=5:rem decay 0-15
       94 s=15:rem sustain 0-15
       95 r=5:rem release 0-15
       96 c=2570:rem duty cycle 0-4095
      100 print chr$(142)"{clr}{white}*** c64 piano ***"
      110 print "by nino porcino & francesco sblendorio"
      120 print
      140 gosub 60000     
      150 gosub 61000
      160 gosub 62000
      170 sys {main}
      180 if peek({exit_code})=7 then end
      190 if peek({exit_code})=1 then 210
      200 print "unexpected condition":end
      210 print "{down}change settings{down}"
      220 print "1-attack     6-duty cyle"
      230 print "2-decay      7-sid 1"
      240 print "3-sustain    8-sid 2"
      250 print "4-release"
      260 print "5-waveform"
      270 print:input "your choice";x
      280 on x gosub 300,310,320,330,340,345,350,360
      290 goto 100
      300 input "attack (0-15)";a:a=a and 15:return
      310 input "decay (0-15)";d:d=d and 15:return
      320 input "sustain (0-15)";s:s=s and 15:return
      330 input "release (0-15)";r:r=r and 15:return
      340 input "waveform (0-3)";w:w=w and 3:return
      345 input "duty cycle (0-4095)";c:c=c and 4095:return
      350 input "sid 1 (hex)";sid$(0):gosub 50000:return
      360 input "sid 2 (hex)";sid$(1):gosub 50000:return
    19999 end

    50000 rem ==== update voice sid addresses
    50010 for j=0 to nsid-1
    50020   x$ = sid$(j)
    50030   gosub 59000
    50040   sid(j) = x
    50045   poke sid(j)+24,15
    50050 next
    50060 rem write address into tables
    50100 j=0:k=0
    50110 for n=0 to {(NVOCI-1)}
    50120    x = sid(j) + k*7
    50130    poke {voice_address_hi}+n, int(x/256)
    50140    poke {voice_address_lo}+n, x-(int(x/256)*256)
    50150    k=k+1:if k=3 then j=j+1:k=0
    50160 next
    50170 return

    59000 rem === convert hex in x$ to decimal in x
    59020 x=0
    59030 for i=0 to 3
    59040   n = asc(mid$(x$,i+1,1))-48
    59050   if n<10 then x = x + n*(16^(3-i))
    59060   if n>16 then x = x + (n-7)*(16^(3-i))
    59070 next
    59080 return

    60000 print "{home}{down}{down}{down}attack   :";a
    60010 print "decay    :";d;h$;"   "
    60020 print "sustain  :";s;h$;"   "
    60030 print "release  :";r;h$;"   "
    60040 print "waveform : ";wf$(w)
    60045 print "duty cyc.:";c;h$;"    "
    60050 print "{home}{down}{down}{down}";
    60060 print ,,"sid 1: $"sid$(0)sid(0)
    60060 print ,,"sid 2: $"sid$(1)sid(1)
    60999 return

    61000 poke {REG2_right}, int(c/256)
    61010 poke {REG3_right}, c-(int(c/256)*256)
    61020 poke {REG4_right}, 2^(w+4)
    61030 poke {REG5_right}, a*16+d
    61040 poke {REG6_right}, s*16+r
    61050 return

    62000 print "{home}{down}{down}{down}{down}{down}{down}{down}{down}{down}{down}press:{down}"
    62010 print "f1 - to change parameters"
    62020 print "f7 - to exit"
    62030 return

   basic end

   include "siel.lm"
   include "c64_keyboard.lm"
   include "freq.lm"
   include "irq.lm"

; ============ VOCI SID =============
const NVOCI = 6

; tabella gli indirizzi delle singole voci nei vari SID
voice_address_hi:
   .byte 0      ;  ($d400 + 0*7)/256
   .byte 0      ;  ($d400 + 1*7)/256
   .byte 0      ;  ($d400 + 2*7)/256
   .byte 0      ;  ($d420 + 0*7)/256
   .byte 0      ;  ($d420 + 1*7)/256
   .byte 0      ;  ($d420 + 2*7)/256
   .byte 0      ;  ($d440 + 0*7)/256
   .byte 0      ;  ($d440 + 1*7)/256
   .byte 0      ;  ($d440 + 2*7)/256

voice_address_lo:
   .byte 0      ;  ($d400 + 0*7)%256
   .byte 0      ;  ($d400 + 1*7)%256
   .byte 0      ;  ($d400 + 2*7)%256
   .byte 0      ;  ($d420 + 0*7)%256
   .byte 0      ;  ($d420 + 1*7)%256
   .byte 0      ;  ($d420 + 2*7)%256
   .byte 0      ;  ($d440 + 0*7)%256
   .byte 0      ;  ($d440 + 1*7)%256
   .byte 0      ;  ($d440 + 2*7)%256

const WAV_TRIANGLE =  16
const WAV_SAWTOOTH =  32
const WAV_SQUARE   =  64
const WAV_NOISE    = 128

; keyboard split point
const SPLIT_POINT = 24

; impostazioni SID da applicare a tutte le voci
dim REG2 as byte   ; duty cycle low byte
dim REG3 as byte   ; duty cycle high byte
dim REG4 as byte   ; waveform + gate a zero
dim REG5 as byte   ; attack + decay
dim REG6 as byte   ; sustain + release

; impostazioni sid parte "split" LEFT
dim REG2_left as byte init 0                       ; duty cycle low byte
dim REG3_left as byte init 8                       ; duty cycle high byte
dim REG4_left as byte init WAV_SQUARE              ; waveform + gate a zero
dim REG5_left as byte init  5*16+5                 ; attack + decay
dim REG6_left as byte init 15*16+5                 ; sustain + release

; impostazioni sid parte "split" RIGHT
dim REG2_right as byte init 0                 ; duty cycle low byte
dim REG3_right as byte init 0                 ; duty cycle high byte
dim REG4_right as byte init WAV_SAWTOOTH      ; waveform + gate a zero
dim REG5_right as byte init  5*16+5           ; attack + decay
dim REG6_right as byte init 15*16+5           ; sustain + release

; ===== tasti premuti ====
const KEY_RELEASED  = 0
const KEY_PRESSED   = 1
last_key_status: ds SIEL_NKEYS, KEY_RELEASED    ; i tasti premuti al passaggio precedente
curr_key_status: ds SIEL_NKEYS, KEY_RELEASED    ; i tasti attualmente premuti
new_key_pressed: ds SIEL_NKEYS, KEY_RELEASED    ; i nuovi tasti premuti rispetto al passaggio precedente

; ===== tasti collegati alle voci ====
const VOICE_NONE = 255
key_voices: ds SIEL_NKEYS, VOICE_NONE      ; quale voce (0..NVOCI-1) sta suonando il tasto

; ==== stato delle voci del SID ====
const VOICE_STOPPED = 0
const VOICE_PLAYING = 1
stato_voci: ds NVOCI, VOICE_STOPPED        ; stato delle voci dei SID (VOICE_STOPPED, VOICE_PLAYING)

// =====================================================================================
// stampa a video i buffer a scopo di debug
// =====================================================================================
sub dump_buffers()
   for x=#(SIEL_NKEYS-1) to #0 step #-1
      lda curr_key_status,x
      sta VIDEO_RAM,x

      lda last_key_status,x
      sta VIDEO_RAM+SCREEN_COLS*4,x

      lda new_key_pressed,x
      sta VIDEO_RAM+SCREEN_COLS*8,x

      lda key_voices,x
      sta VIDEO_RAM+SCREEN_COLS*12,x
   next

   for x=#(NVOCI-1) to #0 step #-1
      lda stato_voci,x
      sta VIDEO_RAM+SCREEN_COLS*16,x
   next
end sub

// =====================================================================================
// main (entry point dal BASIC)
// =====================================================================================

dim exit_code as byte at $fb

sub main()

   ; jsr install_irq        ; installa la routine IRQ per gli effetti

   do
      jsr main_loop       

      ld exit_code, #0
      is_pressed #ROW_KEY_F1, #KEY_F1
      if zero then 
         ld exit_code, #1         
      end if
      is_pressed #ROW_KEY_F7, #KEY_F7
      if zero then
         ld exit_code, #7         
      end if
   loop while exit_code = #0

   ; clears keyboard buffer and exit to basic
   ld 198, #0
end sub

// =====================================================================================
// main loop 
// =====================================================================================

sub main_loop()
   jsr copy_curr_in_last    ; copia i tasti correnti in "last_key_status"

   #ifdef  KBD_SIEL then jsr read_siel       ; legge tastiera SIEL
   #ifndef KBD_SIEL then jsr simulate_siel   ; legge tastiera del C64 emulando la SIEL  
   
   jsr stop_released_keys   ; ferma le voci i cui tasti sono stati rilasciati

   jsr calc_new_key_pressed ; rileva i nuovi tasti premuti

   #ifdef DEBUG then jsr dump_buffers ; debug a video

   jsr play_new_keys        ; suona i nuovi tasti
end sub

// =====================================================================================
// copia il buffer curr_key_status in last_key_status in modo da poter rilevare i tasti
// premuti o rilasciati rispetto al passo precedente
// =====================================================================================

sub copy_curr_in_last() 
   for x=#(SIEL_NKEYS-1) to #0 step #-1
      lda curr_key_status,x
      sta last_key_status,x
   next
end sub

// =====================================================================================
// ferma le voci dei tasti rilasciati
// =====================================================================================

sub stop_released_keys() 
   for x=#(SIEL_NKEYS-1) to #0 step #-1
      lda last_key_status,x
      if a=#KEY_PRESSED then
         lda curr_key_status,x
         if a=#KEY_RELEASED then
            jsr rilascia_tasto_x
         end if      
      end if
   next
end sub

;
; rilascia il tasto indicato nel registro X
;
sub rilascia_tasto_x()
   lda key_voices,x            ; 
   tay                         ; y = quale voce stava suonando il tasto x

   ; se il tasto stava suonando una voce
   if a<>#VOICE_NONE then      

      lda #VOICE_STOPPED          ; marca la voce Y come VOICE_STOPPED
      sta stato_voci,y            ; 

      lda #VOICE_NONE             ; marca il tasto X come nessuna voce
      sta key_voices,x            ;

      ; silenzia il SID associato alla voce Y
      ; abbassa il bit "gate" del registro +4

      sty voce                    ; voce y
      ld regn, #4                 ; registro offset +4
      ld valore, REG4             ; carica waveform + gate = 0 in S+4
      jsr scrivi_voce

   end if
end sub

// =====================================================================================
// scrive in new_key_pressed i nuovi tasti premuti rispetto a last_key_status
// =====================================================================================

sub calc_new_key_pressed() 
   for x=#(SIEL_NKEYS-1) to #0 step #-1
      lda last_key_status,x
      if a=#KEY_RELEASED then
         lda curr_key_status,x         
      else
         lda #KEY_RELEASED         
      end if
      sta new_key_pressed,x
   next
end sub

// =====================================================================================
// suona i nuovi tasti premuti
// =====================================================================================

sub play_new_keys() 
   for x=#(SIEL_NKEYS-1) to #0 step #-1
      lda new_key_pressed,x
      if a=#KEY_PRESSED then
         jsr play_new_key_x
      end if
   next
end sub

;
; suona il tasto premuto nel registro X
;

sub play_new_key_x()
   ; trova la prima voce libera
   for y=#(NVOCI-1) to #0 step #-1
      lda stato_voci,y
      if a=#VOICE_STOPPED then
         jsr play_voice_y_key_x
         exit sub
      end if
   next
end sub

sub play_voice_y_key_x()

   tya                       ; indica che il tasto x suona la voce y
   sta key_voices,x          ;
   
   lda #VOICE_PLAYING        ; indica che la voce y sta suonando
   sta stato_voci,y          ;        

   ; === scrittura nel SID ===

   ; stabilisce se split left o right
   if x < #SPLIT_POINT then
      ld REG2, REG2_left
      ld REG3, REG3_left
      ld REG4, REG4_left
      ld REG5, REG5_left
      ld REG6, REG6_left
   else
      ld REG2, REG2_right
      ld REG3, REG3_right
      ld REG4, REG4_right
      ld REG5, REG5_right
      ld REG6, REG6_right
   end if

   sty voce              ; voce (non cambia per le tre scritture successive)

   ; ==== FREQ byte basso
   ld  regn, #0          ; registro (offset +0)
   lda FREQTABLE_LOW,x   ;
   sta valore            ; valore
   jsr scrivi_voce       ;

   ; ==== FREQ byte alto
   inc regn              ; registro (offset +1)
   lda FREQTABLE_HI,x    ;
   sta valore            ; valore
   jsr scrivi_voce       ;

   ld regn, #2  : ld valore, REG2 : jsr scrivi_voce    ; duty cycle low byte
   ld regn, #3  : ld valore, REG3 : jsr scrivi_voce    ; duty cycle high byte
   ld regn, #5  : ld valore, REG5 : jsr scrivi_voce    ; attack-decay
   ld regn, #6  : ld valore, REG6 : jsr scrivi_voce    ; sustain release

   ; ==== gate on
   ld  regn, #4          ; registro (offset +4)
   lda REG4              ; carica waveform
   or  #1                ; + gate = 1 in S+4
   sta valore            ; valore
   jsr scrivi_voce       ;

end sub

; =====================================================================================
; Nome: scrivi_voce()
; Scopo: scrive un valore nel registro del SID associato alla voce specificata
; Input:
;        voce     la voce (0..NVOCI-1) dove scrivere
;        regn     l'offset del registro SID dove scrivere
;        valore   il valore da scrivere
;
; Note: il SID da utilizzare viene stabilito in base alla tabella "voice_address_lo/hi"
;
;       La routine lascia intatti i registri X e Y
; =====================================================================================

dim voce   as byte at $fc
dim regn   as byte at $fd
dim valore as byte at $fe

dim ptr    as word at $03     ; puntatore usato per puntare al SID
dim tmpy   as byte at $ff     ; salva il registro Y

sub scrivi_voce()
   sty tmpy            ; salva registro che verrà sporcati

   ldy voce            ; y = numero SID della voce

   lda voice_address_lo,y : sta ptr     ;
   lda voice_address_hi,y : sta ptr+1   ; (ptr) = indirizzo SID

   ldy regn            ; y = numero registro (offset)

   lda valore          ; a = valore da scrivere

   sta (ptr),y         ; equivale a: &(sid_addres[voce]+regn) = valore

   ldy tmpy            ; recupera registri sporcati
end sub

