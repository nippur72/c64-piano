
   PROCESSOR 6502














































































































































































































































    
































































    





































































































        








            
















        
























GETIN   = $FFE4     
CLRSCN  = $E544     
PRNSTR  = $AB1E     
GOHOME  = $E566     
PRNINT  = $BDCD     



CURSOR_PTR  = 209
JIFFY_CLOCK = 162
CRSRCOL     = 646
MEMORY_CONFIG = 1



COLOR_BLACK   = 0
COLOR_WHITE   = 1
COLOR_RED     = 2
COLOR_CYAN    = 3
COLOR_MAGENTA = 4
COLOR_GREEN   = 5
COLOR_BLUE    = 6
COLOR_YELLOW  = 7




SCREEN_COLS = 40
SCREEN_ROWS = 25
VIDEO_RAM = 1024
COLOR_RAM =  55296
COLOR_PAGE_OFFSET =  ((COLOR_RAM - VIDEO_RAM) / 256)
BASIC_RAM = 2049
RASTER =  $D012
ROMCHAR =  $D000
BORDER =  53280
BACKGROUND =  53281


    



    












       










































   ORG BASIC_RAM


BASIC_ROW_0: BYTE [BASIC_ROW_1%256],[BASIC_ROW_1/256],[10%256],[10/256],134,87,70,36,40,51,41,44,83,73,68,40,55,41,44,83,73,68,36,40,55,41,0
BASIC_ROW_1: BYTE [BASIC_ROW_2%256],[BASIC_ROW_2/256],[20%256],[20/256],87,70,36,40,48,41,178,199,40,50,48,54,41,170,199,40,50,48,53,41,0
BASIC_ROW_2: BYTE [BASIC_ROW_3%256],[BASIC_ROW_3/256],[30%256],[30/256],87,70,36,40,49,41,178,199,40,50,48,54,41,170,199,40,49,56,48,41,0
BASIC_ROW_3: BYTE [BASIC_ROW_4%256],[BASIC_ROW_4/256],[40%256],[40/256],87,70,36,40,50,41,178,199,40,50,48,55,41,170,199,40,50,48,52,41,0
BASIC_ROW_4: BYTE [BASIC_ROW_5%256],[BASIC_ROW_5/256],[50%256],[50/256],87,70,36,40,51,41,178,199,40,49,54,54,41,170,199,40,49,54,54,41,0
BASIC_ROW_5: BYTE [BASIC_ROW_6%256],[BASIC_ROW_6/256],[60%256],[60/256],72,36,178,199,40,49,53,55,41,0
BASIC_ROW_6: BYTE [BASIC_ROW_7%256],[BASIC_ROW_7/256],[65%256],[65/256],78,83,73,68,178,50,58,83,73,68,36,40,48,41,178,34,68,52,48,48,34,58,83,73,68,36,40,49,41,178,34,68,52,50,48,34,58,141,53,48,48,48,48,0
BASIC_ROW_7: BYTE [BASIC_ROW_8%256],[BASIC_ROW_8/256],[70%256],[70/256],87,178,49,58,143,32,87,65,86,69,70,79,82,77,32,48,45,51,0
BASIC_ROW_8: BYTE [BASIC_ROW_9%256],[BASIC_ROW_9/256],[80%256],[80/256],65,178,53,58,143,32,65,84,84,65,67,75,32,48,45,49,53,0
BASIC_ROW_9: BYTE [BASIC_ROW_10%256],[BASIC_ROW_10/256],[90%256],[90/256],68,178,53,58,143,32,68,69,67,65,89,32,48,45,49,53,0
BASIC_ROW_10: BYTE [BASIC_ROW_11%256],[BASIC_ROW_11/256],[100%256],[100/256],83,178,49,53,58,143,32,83,85,83,84,65,73,78,32,48,45,49,53,0
BASIC_ROW_11: BYTE [BASIC_ROW_12%256],[BASIC_ROW_12/256],[110%256],[110/256],82,178,53,58,143,32,82,69,76,69,65,83,69,32,48,45,49,53,0
BASIC_ROW_12: BYTE [BASIC_ROW_13%256],[BASIC_ROW_13/256],[115%256],[115/256],141,54,51,48,48,48,58,143,32,80,85,76,83,69,32,87,65,86,69,32,83,69,84,84,73,78,71,0
BASIC_ROW_13: BYTE [BASIC_ROW_14%256],[BASIC_ROW_14/256],[120%256],[120/256],153,199,40,49,52,50,41,34,147,5,42,42,42,32,67,54,52,32,80,73,65,78,79,32,42,42,42,34,0
BASIC_ROW_14: BYTE [BASIC_ROW_15%256],[BASIC_ROW_15/256],[125%256],[125/256],153,34,66,89,32,78,73,78,79,32,80,79,82,67,73,78,79,32,38,32,70,82,65,78,67,69,83,67,79,32,83,66,76,69,78,68,79,82,73,79,34,0
BASIC_ROW_15: BYTE [BASIC_ROW_16%256],[BASIC_ROW_16/256],[126%256],[126/256],153,0
BASIC_ROW_16: BYTE [BASIC_ROW_17%256],[BASIC_ROW_17/256],[130%256],[130/256],151,53,52,50,55,50,170,50,52,44,49,53,58,143,32,70,85,76,76,32,86,79,76,85,77,69,0
BASIC_ROW_17: BYTE [BASIC_ROW_18%256],[BASIC_ROW_18/256],[140%256],[140/256],141,54,48,48,48,48,0
BASIC_ROW_18: BYTE [BASIC_ROW_19%256],[BASIC_ROW_19/256],[150%256],[150/256],141,54,49,48,48,48,0
BASIC_ROW_19: BYTE [BASIC_ROW_20%256],[BASIC_ROW_20/256],[160%256],[160/256],141,54,50,48,48,48,0
BASIC_ROW_20: BYTE [BASIC_ROW_21%256],[BASIC_ROW_21/256],[170%256],[170/256],158,[[[MAIN%100000]-[MAIN%10000]]/10000+$30],[[[MAIN%10000]-[MAIN%1000]]/1000+$30],[[[MAIN%1000]-[MAIN%100]]/100+$30],[[[MAIN%100]-[MAIN%10]]/10+$30],[[[MAIN%10]-[MAIN%1]]/1+$30],0
BASIC_ROW_21: BYTE [BASIC_ROW_22%256],[BASIC_ROW_22/256],[180%256],[180/256],139,194,40,[[[EXIT_CODE%100000]-[EXIT_CODE%10000]]/10000+$30],[[[EXIT_CODE%10000]-[EXIT_CODE%1000]]/1000+$30],[[[EXIT_CODE%1000]-[EXIT_CODE%100]]/100+$30],[[[EXIT_CODE%100]-[EXIT_CODE%10]]/10+$30],[[[EXIT_CODE%10]-[EXIT_CODE%1]]/1+$30],41,178,55,167,128,0
BASIC_ROW_22: BYTE [BASIC_ROW_23%256],[BASIC_ROW_23/256],[190%256],[190/256],139,194,40,[[[EXIT_CODE%100000]-[EXIT_CODE%10000]]/10000+$30],[[[EXIT_CODE%10000]-[EXIT_CODE%1000]]/1000+$30],[[[EXIT_CODE%1000]-[EXIT_CODE%100]]/100+$30],[[[EXIT_CODE%100]-[EXIT_CODE%10]]/10+$30],[[[EXIT_CODE%10]-[EXIT_CODE%1]]/1+$30],41,178,49,167,50,49,48,0
BASIC_ROW_23: BYTE [BASIC_ROW_24%256],[BASIC_ROW_24/256],[200%256],[200/256],153,34,85,78,69,88,80,69,67,84,69,68,32,67,79,78,68,73,84,73,79,78,34,58,128,0
BASIC_ROW_24: BYTE [BASIC_ROW_25%256],[BASIC_ROW_25/256],[210%256],[210/256],153,34,17,67,72,65,78,71,69,32,83,69,84,84,73,78,71,83,17,34,0
BASIC_ROW_25: BYTE [BASIC_ROW_26%256],[BASIC_ROW_26/256],[220%256],[220/256],153,34,49,45,65,84,84,65,67,75,32,32,32,32,32,54,45,83,73,68,32,49,34,0
BASIC_ROW_26: BYTE [BASIC_ROW_27%256],[BASIC_ROW_27/256],[230%256],[230/256],153,34,50,45,68,69,67,65,89,32,32,32,32,32,32,55,45,83,73,68,32,50,34,0
BASIC_ROW_27: BYTE [BASIC_ROW_28%256],[BASIC_ROW_28/256],[240%256],[240/256],153,34,51,45,83,85,83,84,65,73,78,34,0
BASIC_ROW_28: BYTE [BASIC_ROW_29%256],[BASIC_ROW_29/256],[250%256],[250/256],153,34,52,45,82,69,76,69,65,83,69,34,0
BASIC_ROW_29: BYTE [BASIC_ROW_30%256],[BASIC_ROW_30/256],[260%256],[260/256],153,34,53,45,87,65,86,69,70,79,82,77,34,0
BASIC_ROW_30: BYTE [BASIC_ROW_31%256],[BASIC_ROW_31/256],[270%256],[270/256],153,58,133,34,89,79,85,82,32,67,72,79,73,67,69,34,59,67,0
BASIC_ROW_31: BYTE [BASIC_ROW_32%256],[BASIC_ROW_32/256],[280%256],[280/256],145,67,141,51,48,48,44,51,49,48,44,51,50,48,44,51,51,48,44,51,52,48,44,51,53,48,44,51,54,48,0
BASIC_ROW_32: BYTE [BASIC_ROW_33%256],[BASIC_ROW_33/256],[290%256],[290/256],137,49,50,48,0
BASIC_ROW_33: BYTE [BASIC_ROW_34%256],[BASIC_ROW_34/256],[300%256],[300/256],133,34,65,84,84,65,67,75,32,40,48,45,49,53,41,34,59,65,58,65,178,65,175,49,53,58,142,0
BASIC_ROW_34: BYTE [BASIC_ROW_35%256],[BASIC_ROW_35/256],[310%256],[310/256],133,34,68,69,67,65,89,32,40,48,45,49,53,41,34,59,68,58,68,178,68,175,49,53,58,142,0
BASIC_ROW_35: BYTE [BASIC_ROW_36%256],[BASIC_ROW_36/256],[320%256],[320/256],133,34,83,85,83,84,65,73,78,32,40,48,45,49,53,41,34,59,83,58,83,178,83,175,49,53,58,142,0
BASIC_ROW_36: BYTE [BASIC_ROW_37%256],[BASIC_ROW_37/256],[330%256],[330/256],133,34,82,69,76,69,65,83,69,32,40,48,45,49,53,41,34,59,82,58,82,178,82,175,49,53,58,142,0
BASIC_ROW_37: BYTE [BASIC_ROW_38%256],[BASIC_ROW_38/256],[340%256],[340/256],133,34,87,65,86,69,70,79,82,77,32,40,48,45,51,41,34,59,87,58,87,178,87,175,51,58,142,0
BASIC_ROW_38: BYTE [BASIC_ROW_39%256],[BASIC_ROW_39/256],[350%256],[350/256],133,34,83,73,68,32,49,32,40,72,69,88,41,34,59,83,73,68,36,40,48,41,58,141,53,48,48,48,48,58,142,0
BASIC_ROW_39: BYTE [BASIC_ROW_40%256],[BASIC_ROW_40/256],[350%256],[350/256],133,34,83,73,68,32,50,32,40,72,69,88,41,34,59,83,73,68,36,40,49,41,58,141,53,48,48,48,48,58,142,0
BASIC_ROW_40: BYTE [BASIC_ROW_41%256],[BASIC_ROW_41/256],[19999%256],[19999/256],128,0
BASIC_ROW_41: BYTE [BASIC_ROW_42%256],[BASIC_ROW_42/256],[50000%256],[50000/256],129,74,178,48,164,78,83,73,68,171,49,0
BASIC_ROW_42: BYTE [BASIC_ROW_43%256],[BASIC_ROW_43/256],[50020%256],[50020/256],83,73,68,40,74,41,178,48,0
BASIC_ROW_43: BYTE [BASIC_ROW_44%256],[BASIC_ROW_44/256],[50030%256],[50030/256],129,73,178,48,164,51,0
BASIC_ROW_44: BYTE [BASIC_ROW_45%256],[BASIC_ROW_45/256],[50040%256],[50040/256],78,178,198,40,202,40,83,73,68,36,40,74,41,44,73,170,49,44,49,41,41,171,52,56,0
BASIC_ROW_45: BYTE [BASIC_ROW_46%256],[BASIC_ROW_46/256],[50050%256],[50050/256],139,78,179,49,48,167,83,73,68,40,74,41,178,83,73,68,40,74,41,170,78,172,40,49,54,174,40,51,171,73,41,41,0
BASIC_ROW_46: BYTE [BASIC_ROW_47%256],[BASIC_ROW_47/256],[50060%256],[50060/256],139,78,177,49,54,167,83,73,68,40,74,41,178,83,73,68,40,74,41,170,40,78,171,55,41,172,40,49,54,174,40,51,171,73,41,41,0
BASIC_ROW_47: BYTE [BASIC_ROW_48%256],[BASIC_ROW_48/256],[50070%256],[50070/256],130,0
BASIC_ROW_48: BYTE [BASIC_ROW_49%256],[BASIC_ROW_49/256],[50080%256],[50080/256],130,0
BASIC_ROW_49: BYTE [BASIC_ROW_50%256],[BASIC_ROW_50/256],[50090%256],[50090/256],151,[[[SID1%100000]-[SID1%10000]]/10000+$30],[[[SID1%10000]-[SID1%1000]]/1000+$30],[[[SID1%1000]-[SID1%100]]/100+$30],[[[SID1%100]-[SID1%10]]/10+$30],[[[SID1%10]-[SID1%1]]/1+$30],44,83,73,68,40,48,41,171,40,181,40,83,73,68,40,48,41,173,50,53,54,41,172,50,53,54,41,0
BASIC_ROW_50: BYTE [BASIC_ROW_51%256],[BASIC_ROW_51/256],[50100%256],[50100/256],151,[[[SID1%100000]-[SID1%10000]]/10000+$30],[[[SID1%10000]-[SID1%1000]]/1000+$30],[[[SID1%1000]-[SID1%100]]/100+$30],[[[SID1%100]-[SID1%10]]/10+$30],[[[SID1%10]-[SID1%1]]/1+$30],170,49,44,181,40,83,73,68,40,48,41,173,50,53,54,41,0
BASIC_ROW_51: BYTE [BASIC_ROW_52%256],[BASIC_ROW_52/256],[50110%256],[50110/256],151,[[[SID2%100000]-[SID2%10000]]/10000+$30],[[[SID2%10000]-[SID2%1000]]/1000+$30],[[[SID2%1000]-[SID2%100]]/100+$30],[[[SID2%100]-[SID2%10]]/10+$30],[[[SID2%10]-[SID2%1]]/1+$30],44,83,73,68,40,49,41,171,40,181,40,83,73,68,40,49,41,173,50,53,54,41,172,50,53,54,41,0
BASIC_ROW_52: BYTE [BASIC_ROW_53%256],[BASIC_ROW_53/256],[50120%256],[50120/256],151,[[[SID2%100000]-[SID2%10000]]/10000+$30],[[[SID2%10000]-[SID2%1000]]/1000+$30],[[[SID2%1000]-[SID2%100]]/100+$30],[[[SID2%100]-[SID2%10]]/10+$30],[[[SID2%10]-[SID2%1]]/1+$30],170,49,44,181,40,83,73,68,40,49,41,173,50,53,54,41,0
BASIC_ROW_53: BYTE [BASIC_ROW_54%256],[BASIC_ROW_54/256],[59999%256],[59999/256],142,0
BASIC_ROW_54: BYTE [BASIC_ROW_55%256],[BASIC_ROW_55/256],[60000%256],[60000/256],153,34,19,17,17,17,65,84,84,65,67,75,32,32,58,34,59,65,0
BASIC_ROW_55: BYTE [BASIC_ROW_56%256],[BASIC_ROW_56/256],[60010%256],[60010/256],153,34,68,69,67,65,89,32,32,32,58,34,59,68,59,72,36,59,34,32,32,32,34,0
BASIC_ROW_56: BYTE [BASIC_ROW_57%256],[BASIC_ROW_57/256],[60020%256],[60020/256],153,34,83,85,83,84,65,73,78,32,58,34,59,83,59,72,36,59,34,32,32,32,34,0
BASIC_ROW_57: BYTE [BASIC_ROW_58%256],[BASIC_ROW_58/256],[60030%256],[60030/256],153,34,82,69,76,69,65,83,69,32,58,34,59,82,59,72,36,59,34,32,32,32,34,0
BASIC_ROW_58: BYTE [BASIC_ROW_59%256],[BASIC_ROW_59/256],[60040%256],[60040/256],153,34,87,65,86,69,70,79,82,77,58,32,34,59,87,70,36,40,87,41,0
BASIC_ROW_59: BYTE [BASIC_ROW_60%256],[BASIC_ROW_60/256],[60050%256],[60050/256],153,34,19,17,17,17,34,59,0
BASIC_ROW_60: BYTE [BASIC_ROW_61%256],[BASIC_ROW_61/256],[60060%256],[60060/256],153,44,44,34,83,73,68,32,49,58,32,36,34,83,73,68,36,40,48,41,83,73,68,40,48,41,0
BASIC_ROW_61: BYTE [BASIC_ROW_62%256],[BASIC_ROW_62/256],[60060%256],[60060/256],153,44,44,34,83,73,68,32,50,58,32,36,34,83,73,68,36,40,49,41,83,73,68,40,49,41,0
BASIC_ROW_62: BYTE [BASIC_ROW_63%256],[BASIC_ROW_63/256],[60999%256],[60999/256],142,0
BASIC_ROW_63: BYTE [BASIC_ROW_64%256],[BASIC_ROW_64/256],[61000%256],[61000/256],151,[[[REG4%100000]-[REG4%10000]]/10000+$30],[[[REG4%10000]-[REG4%1000]]/1000+$30],[[[REG4%1000]-[REG4%100]]/100+$30],[[[REG4%100]-[REG4%10]]/10+$30],[[[REG4%10]-[REG4%1]]/1+$30],44,50,174,40,87,170,52,41,0
BASIC_ROW_64: BYTE [BASIC_ROW_65%256],[BASIC_ROW_65/256],[61010%256],[61010/256],151,[[[REG5%100000]-[REG5%10000]]/10000+$30],[[[REG5%10000]-[REG5%1000]]/1000+$30],[[[REG5%1000]-[REG5%100]]/100+$30],[[[REG5%100]-[REG5%10]]/10+$30],[[[REG5%10]-[REG5%1]]/1+$30],44,65,172,49,54,170,68,0
BASIC_ROW_65: BYTE [BASIC_ROW_66%256],[BASIC_ROW_66/256],[61020%256],[61020/256],151,[[[REG6%100000]-[REG6%10000]]/10000+$30],[[[REG6%10000]-[REG6%1000]]/1000+$30],[[[REG6%1000]-[REG6%100]]/100+$30],[[[REG6%100]-[REG6%10]]/10+$30],[[[REG6%10]-[REG6%1]]/1+$30],44,83,172,49,54,170,82,0
BASIC_ROW_66: BYTE [BASIC_ROW_67%256],[BASIC_ROW_67/256],[61999%256],[61999/256],142,0
BASIC_ROW_67: BYTE [BASIC_ROW_68%256],[BASIC_ROW_68/256],[62000%256],[62000/256],153,34,19,17,17,17,17,17,17,17,17,80,82,69,83,83,58,17,34,0
BASIC_ROW_68: BYTE [BASIC_ROW_69%256],[BASIC_ROW_69/256],[62010%256],[62010/256],153,34,70,49,32,45,32,84,79,32,67,72,65,78,71,69,32,80,65,82,65,77,69,84,69,82,83,34,0
BASIC_ROW_69: BYTE [BASIC_ROW_70%256],[BASIC_ROW_70/256],[62020%256],[62020/256],153,34,70,55,32,45,32,84,79,32,69,88,73,84,34,0
BASIC_ROW_70: BYTE [BASIC_ROW_71%256],[BASIC_ROW_71/256],[62999%256],[62999/256],142,0
BASIC_ROW_71: BYTE [BASIC_ROW_72%256],[BASIC_ROW_72/256],[63000%256],[63000/256],143,32,73,78,73,84,73,65,76,73,90,69,32,80,85,76,83,69,32,87,65,86,69,0
BASIC_ROW_72: BYTE [BASIC_ROW_73%256],[BASIC_ROW_73/256],[63010%256],[63010/256],72,73,178,49,48,58,76,79,178,49,48,0
BASIC_ROW_73: BYTE [BASIC_ROW_74%256],[BASIC_ROW_74/256],[63020%256],[63020/256],151,53,52,50,55,52,44,72,73,58,151,53,52,50,55,53,44,76,79,0
BASIC_ROW_74: BYTE [BASIC_ROW_75%256],[BASIC_ROW_75/256],[63030%256],[63030/256],151,53,52,50,56,49,44,72,73,58,151,53,52,50,56,50,44,76,79,0
BASIC_ROW_75: BYTE [BASIC_ROW_76%256],[BASIC_ROW_76/256],[63040%256],[63040/256],151,53,52,50,56,56,44,72,73,58,151,53,52,50,56,57,44,76,79,0
BASIC_ROW_76: BYTE [BASIC_ROW_77%256],[BASIC_ROW_77/256],[63050%256],[63050/256],151,53,52,50,55,52,170,51,50,44,72,73,58,151,53,52,50,55,53,170,51,50,44,76,79,0
BASIC_ROW_77: BYTE [BASIC_ROW_78%256],[BASIC_ROW_78/256],[63060%256],[63060/256],151,53,52,50,56,49,170,51,50,44,72,73,58,151,53,52,50,56,50,170,51,50,44,76,79,0
BASIC_ROW_78: BYTE [BASIC_ROW_79%256],[BASIC_ROW_79/256],[63070%256],[63070/256],151,53,52,50,56,56,170,51,50,44,72,73,58,151,53,52,50,56,57,170,51,50,44,76,79,0
BASIC_ROW_79: BYTE [BASIC_ROW_80%256],[BASIC_ROW_80/256],[63999%256],[63999/256],142,0
BASIC_ROW_80 BYTE 0,0





SIEL_START =  57088
SIEL_LENGTH =  7
SIEL_NKEYS =  56     






BIT_COUNTER: BYTE

READ_SIEL:
   LDY #0                           
FOR_658_START:
	LDX #0
FOR_658_LOOP:
    LDA #8
    STA BIT_COUNTER


      LDA SIEL_START,X              

      
      
DO_667_START:
         LSR                        
         PHA                        
IF_672_START:
	BCS IF_672_ELSE
            LDA #KEY_PRESSED        
	JMP IF_672_END
IF_672_ELSE:
            LDA #KEY_RELEASED       
IF_672_END:
         STA CURR_KEY_STATUS,Y      
         PLA                        
         INY                        
         
         DEC BIT_COUNTER            
	BNE DO_667_START
DO_667_END:

		inx
	CPX #SIEL_LENGTH+1
	BNE FOR_658_LOOP

FOR_658_END:
SUB_656_END:
   rts









RIGA: BYTE 

READ_C64_KEYBOARD:
     
                                                                            
                                                                   
     
   LDA RIGA
   STA $DC00       
   LDA $DC01       
   STA RIGA    
SUB_692_END:
   rts









READ_C64_SIMPLE:
   STA $DC00       
   LDA $DC01       
SUB_711_END:
   rts






  
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
                                                                                                                                     
  

KEYBOARD_ROW_0 =  %11111110
KEYBOARD_ROW_1 =  %11111101
KEYBOARD_ROW_2 =  %11111011
KEYBOARD_ROW_3 =  %11110111
KEYBOARD_ROW_4 =  %11101111
KEYBOARD_ROW_5 =  %11011111
KEYBOARD_ROW_6 =  %10111111
KEYBOARD_ROW_7 =  %01111111
              
KEY_STOP = %01111111 
KEY_SLASH = %01111111 
KEY_COMMA = %01111111 
KEY_N = %01111111 
KEY_V = %01111111 
KEY_X = %01111111 
KEY_LSHIFT = %01111111 
KEY_DOWN = %01111111 

KEY_F5 = %10111111 
KEY_E = %10111111 
KEY_T = %10111111 
KEY_U = %10111111 
KEY_O = %10111111 
KEY_AT = %10111111 
KEY_POW = %10111111 
KEY_Q = %10111111 

KEY_F3 = %11011111 
KEY_S = %11011111 
KEY_F = %11011111 
KEY_H = %11011111 
KEY_K = %11011111 
KEY_COLON = %11011111 
KEY_EQUAL = %11011111 
KEY_CBM = %11011111 

KEY_F1 = %11101111 
KEY_Z = %11101111 
KEY_C = %11101111 
KEY_B = %11101111 
KEY_M = %11101111 
KEY_DOT = %11101111 
KEY_RSHIFT = %11101111 
KEY_SPACE = %11101111 

KEY_F7 = %11110111 
KEY_4 = %11110111 
KEY_6 = %11110111 
KEY_8 = %11110111 
KEY_0 = %11110111 
KEY_MINUS = %11110111 
KEY_HOME = %11110111 
KEY_2 = %11110111 

KEY_RIGHT = %11111011 
KEY_A = %11111011 
KEY_D = %11111011 
KEY_G = %11111011 
KEY_J = %11111011 
KEY_L = %11111011 
KEY_SCOLON = %11111011 
KEY_CONTROL = %11111011 

KEY_RETURN = %11111101 
KEY_W = %11111101 
KEY_R = %11111101 
KEY_Y = %11111101 
KEY_I = %11111101 
KEY_P = %11111101 
KEY_ASTERISK = %11111101 
KEY_ESCAPE = %11111101 

KEY_DELETE = %11111110 
KEY_3 = %11111110 
KEY_5 = %11111110 
KEY_7 = %11111110 
KEY_9 = %11111110 
KEY_PLUS = %11111110 
KEY_POUND = %11111110 
KEY_1 = %11111110 

ROW_KEY_STOP =  %11111110
ROW_KEY_SLASH =  %11111101
ROW_KEY_COMMA =  %11111011
ROW_KEY_N =  %11110111
ROW_KEY_V =  %11101111
ROW_KEY_X =  %11011111
ROW_KEY_LSHIFT =  %10111111
ROW_KEY_DOWN =  %01111111

ROW_KEY_F5 =  %11111110
ROW_KEY_E =  %11111101
ROW_KEY_T =  %11111011
ROW_KEY_U =  %11110111
ROW_KEY_O =  %11101111
ROW_KEY_AT =  %11011111
ROW_KEY_POW =  %10111111
ROW_KEY_Q =  %01111111

ROW_KEY_F3 =  %11111110
ROW_KEY_S =  %11111101
ROW_KEY_F =  %11111011
ROW_KEY_H =  %11110111
ROW_KEY_K =  %11101111
ROW_KEY_COLON =  %11011111
ROW_KEY_EQUAL =  %10111111
ROW_KEY_CBM =  %01111111

ROW_KEY_F1 =  %11111110
ROW_KEY_Z =  %11111101
ROW_KEY_C =  %11111011
ROW_KEY_B =  %11110111
ROW_KEY_M =  %11101111
ROW_KEY_DOT =  %11011111
ROW_KEY_RSHIFT =  %10111111
ROW_KEY_SPACE =  %01111111

ROW_KEY_F7 =  %11111110
ROW_KEY_4 =  %11111101
ROW_KEY_6 =  %11111011
ROW_KEY_8 =  %11110111
ROW_KEY_0 =  %11101111
ROW_KEY_MINUS =  %11011111
ROW_KEY_HOME =  %10111111
ROW_KEY_2 =  %01111111

ROW_KEY_RIGHT =  %11111110
ROW_KEY_A =  %11111101
ROW_KEY_D =  %11111011
ROW_KEY_G =  %11110111
ROW_KEY_J =  %11101111
ROW_KEY_L =  %11011111
ROW_KEY_SCOLON =  %10111111
ROW_KEY_CONTROL =  %01111111

ROW_KEY_RETURN =  %11111110
ROW_KEY_W =  %11111101
ROW_KEY_R =  %11111011
ROW_KEY_Y =  %11110111
ROW_KEY_I =  %11101111
ROW_KEY_P =  %11011111
ROW_KEY_ASTERISK =  %10111111
ROW_KEY_ESCAPE =  %01111111

ROW_KEY_DELETE =  %11111110
ROW_KEY_3 =  %11111101
ROW_KEY_5 =  %11111011
ROW_KEY_7 =  %11110111
ROW_KEY_9 =  %11101111
ROW_KEY_PLUS =  %11011111
ROW_KEY_POUND =  %10111111
ROW_KEY_1 =  %01111111

SIMULATE_SIEL:
   
   LDA #KEYBOARD_ROW_7
   JSR READ_C64_SIMPLE
   EOR #KEY_Q
IF_909_START:
	BNE IF_909_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+12

	JMP IF_909_END
IF_909_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+12

IF_909_END:

   LDA #KEYBOARD_ROW_7
   JSR READ_C64_SIMPLE
   EOR #KEY_2
IF_922_START:
	BNE IF_922_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+13

	JMP IF_922_END
IF_922_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+13

IF_922_END:

   LDA #KEYBOARD_ROW_1
   JSR READ_C64_SIMPLE
   EOR #KEY_W
IF_935_START:
	BNE IF_935_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+14

	JMP IF_935_END
IF_935_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+14

IF_935_END:

   LDA #KEYBOARD_ROW_1
   JSR READ_C64_SIMPLE
   EOR #KEY_3
IF_948_START:
	BNE IF_948_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+15

	JMP IF_948_END
IF_948_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+15

IF_948_END:

   LDA #KEYBOARD_ROW_1
   JSR READ_C64_SIMPLE
   EOR #KEY_E
IF_961_START:
	BNE IF_961_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+16

	JMP IF_961_END
IF_961_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+16

IF_961_END:

   LDA #KEYBOARD_ROW_2
   JSR READ_C64_SIMPLE
   EOR #KEY_R
IF_974_START:
	BNE IF_974_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+17

	JMP IF_974_END
IF_974_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+17

IF_974_END:

   LDA #KEYBOARD_ROW_2
   JSR READ_C64_SIMPLE
   EOR #KEY_5
IF_987_START:
	BNE IF_987_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+18

	JMP IF_987_END
IF_987_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+18

IF_987_END:

   LDA #KEYBOARD_ROW_2
   JSR READ_C64_SIMPLE
   EOR #KEY_T
IF_1000_START:
	BNE IF_1000_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+19

	JMP IF_1000_END
IF_1000_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+19

IF_1000_END:

   LDA #KEYBOARD_ROW_2
   JSR READ_C64_SIMPLE
   EOR #KEY_6
IF_1013_START:
	BNE IF_1013_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+20

	JMP IF_1013_END
IF_1013_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+20

IF_1013_END:

   LDA #KEYBOARD_ROW_3
   JSR READ_C64_SIMPLE
   EOR #KEY_Y
IF_1026_START:
	BNE IF_1026_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+21

	JMP IF_1026_END
IF_1026_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+21

IF_1026_END:

   LDA #KEYBOARD_ROW_3
   JSR READ_C64_SIMPLE
   EOR #KEY_7
IF_1039_START:
	BNE IF_1039_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+22

	JMP IF_1039_END
IF_1039_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+22

IF_1039_END:

   LDA #KEYBOARD_ROW_3
   JSR READ_C64_SIMPLE
   EOR #KEY_U
IF_1052_START:
	BNE IF_1052_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+23

	JMP IF_1052_END
IF_1052_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+23

IF_1052_END:

   LDA #KEYBOARD_ROW_4
   JSR READ_C64_SIMPLE
   EOR #KEY_I
IF_1065_START:
	BNE IF_1065_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+24

	JMP IF_1065_END
IF_1065_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+24

IF_1065_END:

   LDA #KEYBOARD_ROW_4
   JSR READ_C64_SIMPLE
   EOR #KEY_9
IF_1078_START:
	BNE IF_1078_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+25

	JMP IF_1078_END
IF_1078_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+25

IF_1078_END:

   LDA #KEYBOARD_ROW_4
   JSR READ_C64_SIMPLE
   EOR #KEY_O
IF_1091_START:
	BNE IF_1091_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+26

	JMP IF_1091_END
IF_1091_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+26

IF_1091_END:

   LDA #KEYBOARD_ROW_4
   JSR READ_C64_SIMPLE
   EOR #KEY_0
IF_1104_START:
	BNE IF_1104_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+27

	JMP IF_1104_END
IF_1104_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+27

IF_1104_END:

   LDA #KEYBOARD_ROW_5
   JSR READ_C64_SIMPLE
   EOR #KEY_P
IF_1117_START:
	BNE IF_1117_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+28

	JMP IF_1117_END
IF_1117_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+28

IF_1117_END:


   LDA #ROW_KEY_AT
   JSR READ_C64_SIMPLE
   EOR #KEY_AT
IF_1131_START:
	BNE IF_1131_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+29

	JMP IF_1131_END
IF_1131_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+29

IF_1131_END:

   LDA #ROW_KEY_EQUAL
   JSR READ_C64_SIMPLE
   EOR #KEY_EQUAL
IF_1144_START:
	BNE IF_1144_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+30

	JMP IF_1144_END
IF_1144_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+30

IF_1144_END:

   LDA #ROW_KEY_ASTERISK
   JSR READ_C64_SIMPLE
   EOR #KEY_ASTERISK
IF_1157_START:
	BNE IF_1157_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+31

	JMP IF_1157_END
IF_1157_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+31

IF_1157_END:

   LDA #ROW_KEY_DELETE
   JSR READ_C64_SIMPLE
   EOR #KEY_DELETE
IF_1170_START:
	BNE IF_1170_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+32

	JMP IF_1170_END
IF_1170_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+32

IF_1170_END:

   LDA #ROW_KEY_RETURN
   JSR READ_C64_SIMPLE
   EOR #KEY_RETURN
IF_1183_START:
	BNE IF_1183_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+33

	JMP IF_1183_END
IF_1183_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+33

IF_1183_END:


   
   LDA #KEYBOARD_ROW_1
   JSR READ_C64_SIMPLE
   EOR #KEY_Z
IF_1198_START:
	BNE IF_1198_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+0

	JMP IF_1198_END
IF_1198_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+0

IF_1198_END:

   LDA #KEYBOARD_ROW_1
   JSR READ_C64_SIMPLE
   EOR #KEY_S
IF_1211_START:
	BNE IF_1211_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+1

	JMP IF_1211_END
IF_1211_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+1

IF_1211_END:

   LDA #KEYBOARD_ROW_2
   JSR READ_C64_SIMPLE
   EOR #KEY_X
IF_1224_START:
	BNE IF_1224_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+2

	JMP IF_1224_END
IF_1224_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+2

IF_1224_END:

   LDA #KEYBOARD_ROW_2
   JSR READ_C64_SIMPLE
   EOR #KEY_D
IF_1237_START:
	BNE IF_1237_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+3

	JMP IF_1237_END
IF_1237_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+3

IF_1237_END:

   LDA #KEYBOARD_ROW_2
   JSR READ_C64_SIMPLE
   EOR #KEY_C
IF_1250_START:
	BNE IF_1250_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+4

	JMP IF_1250_END
IF_1250_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+4

IF_1250_END:

   LDA #KEYBOARD_ROW_3
   JSR READ_C64_SIMPLE
   EOR #KEY_V
IF_1263_START:
	BNE IF_1263_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+5

	JMP IF_1263_END
IF_1263_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+5

IF_1263_END:

   LDA #KEYBOARD_ROW_3
   JSR READ_C64_SIMPLE
   EOR #KEY_G
IF_1276_START:
	BNE IF_1276_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+6

	JMP IF_1276_END
IF_1276_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+6

IF_1276_END:

   LDA #KEYBOARD_ROW_3
   JSR READ_C64_SIMPLE
   EOR #KEY_B
IF_1289_START:
	BNE IF_1289_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+7

	JMP IF_1289_END
IF_1289_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+7

IF_1289_END:

   LDA #KEYBOARD_ROW_3
   JSR READ_C64_SIMPLE
   EOR #KEY_H
IF_1302_START:
	BNE IF_1302_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+8

	JMP IF_1302_END
IF_1302_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+8

IF_1302_END:

   LDA #KEYBOARD_ROW_4
   JSR READ_C64_SIMPLE
   EOR #KEY_N
IF_1315_START:
	BNE IF_1315_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+9

	JMP IF_1315_END
IF_1315_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+9

IF_1315_END:

   LDA #KEYBOARD_ROW_4
   JSR READ_C64_SIMPLE
   EOR #KEY_J
IF_1328_START:
	BNE IF_1328_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+10

	JMP IF_1328_END
IF_1328_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+10

IF_1328_END:

   LDA #KEYBOARD_ROW_4
   JSR READ_C64_SIMPLE
   EOR #KEY_M
IF_1341_START:
	BNE IF_1341_ELSE
    LDA #KEY_PRESSED
    STA CURR_KEY_STATUS+11

	JMP IF_1341_END
IF_1341_ELSE:
    LDA #KEY_RELEASED
    STA CURR_KEY_STATUS+11

IF_1341_END:

   
     
                                                       
                                                       
                                                       
                                                       
                                                          
     
SUB_891_END:
   rts



















FREQTABLE_LOW:
   .BYTE 180   
   .BYTE 56   
   .BYTE 196   
   .BYTE 89   
   .BYTE 247   
   .BYTE 157   
   .BYTE 78   
   .BYTE 10   
   .BYTE 208   
   .BYTE 162   
   .BYTE 129   
   .BYTE 109   
   .BYTE 103   
   .BYTE 112   
   .BYTE 137   
   .BYTE 178   
   .BYTE 237   
   .BYTE 59   
   .BYTE 156   
   .BYTE 19   
   .BYTE 160   
   .BYTE 69   
   .BYTE 2   
   .BYTE 218   
   .BYTE 206   
   .BYTE 224   
   .BYTE 17   
   .BYTE 100   
   .BYTE 218   
   .BYTE 118   
   .BYTE 57   
   .BYTE 38   
   .BYTE 64   
   .BYTE 137   
   .BYTE 4   
   .BYTE 180   
   .BYTE 156   
   .BYTE 192   
   .BYTE 35   
   .BYTE 200   
   .BYTE 180   
   .BYTE 235   
   .BYTE 114   
   .BYTE 76   
   .BYTE 128   
   .BYTE 18   
   .BYTE 8   
   .BYTE 104   
   .BYTE 57   

FREQTABLE_HI:
   .BYTE 8   
   .BYTE 9   
   .BYTE 9   
   .BYTE 10   
   .BYTE 10   
   .BYTE 11   
   .BYTE 12   
   .BYTE 13   
   .BYTE 13   
   .BYTE 14   
   .BYTE 15   
   .BYTE 16   
   .BYTE 17   
   .BYTE 18   
   .BYTE 19   
   .BYTE 20   
   .BYTE 21   
   .BYTE 23   
   .BYTE 24   
   .BYTE 26   
   .BYTE 27   
   .BYTE 29   
   .BYTE 31   
   .BYTE 32   
   .BYTE 34   
   .BYTE 36   
   .BYTE 39   
   .BYTE 41   
   .BYTE 43   
   .BYTE 46   
   .BYTE 49   
   .BYTE 52   
   .BYTE 55   
   .BYTE 58   
   .BYTE 62   
   .BYTE 65   
   .BYTE 69   
   .BYTE 73   
   .BYTE 78   
   .BYTE 82   
   .BYTE 87   
   .BYTE 92   
   .BYTE 98   
   .BYTE 104   
   .BYTE 110   
   .BYTE 117   
   .BYTE 124   
   .BYTE 131   
   .BYTE 139   

INSTALL_IRQ:
    SEI

    LDA #%01111111
    STA $DC0D                  
    AND $D011
    STA $D011                  ; CLEAR MOST SIGNIFICANT BIT IN VIC'S RASTER REGISTER

    LDA #210
    STA $D012


   LDA #((IRQ_ROUTINE) % 256)
   STA $0314
 IF ((IRQ_ROUTINE) % 256) != ((IRQ_ROUTINE)/256)
      LDA #((IRQ_ROUTINE)/256)
 ENDIF
   STA $0314+1   


    LDA #%00000001
    STA $D01A

    CLI
SUB_1060_END:
   rts


VOLUME =  54296

IRQ_ROUTINE:
    INC VIDEO_RAM
    INC 53280

    INC COUNTER1

    LDA COUNTER1
    AND #3
IF_1520_START:
	CMP #0
	BNE IF_1520_ELSE
    LDA #1
    STA VOLUME

	JMP IF_1520_END
IF_1520_ELSE:
IF_1525_START:
	CMP #2
	BNE IF_1525_ELSE
    LDA #15
    STA VOLUME

	JMP IF_1525_END
IF_1525_ELSE:
          
                           
                               
                  
          
IF_1525_END:

IF_1520_END:

    DEC 53280

    ASL $D019   ; ACKNOWLEDGE THE INTERRUPT BY CLEARING THE VIC'S INTERRUPT FLAG.
    JMP $EA31   




NVOCI =  6







KEY_RELEASED =  0
KEY_PRESSED =  1
LAST_KEY_STATUS: DS SIEL_NKEYS, KEY_RELEASED    
CURR_KEY_STATUS: DS SIEL_NKEYS, KEY_RELEASED    
NEW_KEY_PRESSED: DS SIEL_NKEYS, KEY_RELEASED    


VOICE_NONE =  255
KEY_VOICES: DS SIEL_NKEYS, VOICE_NONE      


VOICE_STOPPED =  0
VOICE_PLAYING =  1
STATO_VOCI: DS NVOCI, VOICE_STOPPED        




DUMP_BUFFERS:
FOR_1566_START:
	LDX #0
FOR_1566_LOOP:
      LDA CURR_KEY_STATUS,X
      STA VIDEO_RAM,X

      LDA LAST_KEY_STATUS,X
      STA VIDEO_RAM+SCREEN_COLS*4,X

      LDA NEW_KEY_PRESSED,X
      STA VIDEO_RAM+SCREEN_COLS*8,X

      LDA KEY_VOICES,X
      STA VIDEO_RAM+SCREEN_COLS*12,X
		inx
	CPX #SIEL_NKEYS-1+1
	BNE FOR_1566_LOOP

FOR_1566_END:

FOR_1580_START:
	LDX #0
FOR_1580_LOOP:
      LDA STATO_VOCI,X
      STA VIDEO_RAM+SCREEN_COLS*16,X
		inx
	CPX #NVOCI-1+1
	BNE FOR_1580_LOOP

FOR_1580_END:
SUB_1136_END:
   rts





EXIT_CODE =  $FB

MAIN:
   JSR INIT_SID             

   

DO_1598_START:
      
      JSR MAIN_LOOP       

    LDA #0
    STA EXIT_CODE

   LDA #ROW_KEY_F1
   STA $DC00       
   LDA $DC01       
   EOR #KEY_F1

IF_1630_START:
	BNE IF_1630_ELSE
    LDA #1
    STA EXIT_CODE

IF_1630_ELSE:
IF_1630_END:
   LDA #ROW_KEY_F7
   STA $DC00       
   LDA $DC01       
   EOR #KEY_F7

IF_1640_START:
	BNE IF_1640_ELSE
    LDA #7
    STA EXIT_CODE

IF_1640_ELSE:
IF_1640_END:
	LDA EXIT_CODE

 IF [0]!=0
	CMP #0
 ENDIF

	BEQ DO_1598_START
DO_1598_END:


   
    LDA #0
    STA 198

SUB_1163_END:
   rts





MAIN_LOOP:
   JSR COPY_CURR_IN_LAST    

 IFCONST KBD_SIEL
   JSR READ_SIEL       
 ENDIF
 IFNCONST KBD_SIEL
   JSR SIMULATE_SIEL   
 ENDIF
   
   JSR STOP_RELEASED_KEYS   

   JSR CALC_NEW_KEY_PRESSED 

 IFCONST DEBUG
   JSR DUMP_BUFFERS 
 ENDIF

   JSR PLAY_NEW_KEYS        
SUB_1191_END:
   rts

INIT_SID:
   
   
   
   
   
   
   

   
    LDA REG5    
    STA SID1+[0*7]+5

    LDA REG5    
    STA SID1+[1*7]+5

    LDA REG5    
    STA SID1+[2*7]+5

    LDA REG5    
    STA SID2+[0*7]+5

    LDA REG5    
    STA SID2+[1*7]+5

    LDA REG5    
    STA SID2+[2*7]+5


   
    LDA REG6    
    STA SID1+[0*7]+6

    LDA REG6    
    STA SID1+[1*7]+6

    LDA REG6    
    STA SID1+[2*7]+6

    LDA REG6    
    STA SID2+[0*7]+6

    LDA REG6    
    STA SID2+[1*7]+6

    LDA REG6    
    STA SID2+[2*7]+6

SUB_1212_END:
   rts






COPY_CURR_IN_LAST:
FOR_1717_START:
	LDX #0
FOR_1717_LOOP:
      LDA CURR_KEY_STATUS,X
      STA LAST_KEY_STATUS,X
		inx
	CPX #(SIEL_NKEYS-1)+1
	BNE FOR_1717_LOOP

FOR_1717_END:
SUB_1243_END:
   rts





STOP_RELEASED_KEYS:
FOR_1729_START:
	LDX #0
FOR_1729_LOOP:
      LDA LAST_KEY_STATUS,X
IF_1767_START:
	CMP #KEY_PRESSED
	BNE IF_1767_ELSE
         LDA CURR_KEY_STATUS,X
IF_1769_START:
	CMP #KEY_RELEASED
	BNE IF_1769_ELSE
            JSR RILASCIA_TASTO_X
IF_1769_ELSE:
IF_1769_END:
IF_1767_ELSE:
IF_1767_END:
		inx
	CPX #(SIEL_NKEYS-1)+1
	BNE FOR_1729_LOOP

FOR_1729_END:
SUB_1254_END:
   rts




RILASCIA_TASTO_X:
   LDA KEY_VOICES,X            
   TAY                         

   
IF_1789_START:
	CMP #VOICE_NONE
	BEQ IF_1789_ELSE

      LDA #VOICE_STOPPED          
      STA STATO_VOCI,Y            

      LDA #VOICE_NONE             
      STA KEY_VOICES,X            

      
      
      
      
      LDA REG4                         
IF_1802_START:
	CPY #0
	BNE IF_1802_ELSE
 STA SID1+[0*7]+4 
IF_1802_ELSE:
IF_1802_END:
 
IF_1806_START:
	CPY #1
	BNE IF_1806_ELSE
 STA SID1+[1*7]+4 
IF_1806_ELSE:
IF_1806_END:
 
IF_1810_START:
	CPY #2
	BNE IF_1810_ELSE
 STA SID1+[2*7]+4 
IF_1810_ELSE:
IF_1810_END:
 
IF_1814_START:
	CPY #3
	BNE IF_1814_ELSE
 STA SID2+[0*7]+4 
IF_1814_ELSE:
IF_1814_END:
 
IF_1818_START:
	CPY #4
	BNE IF_1818_ELSE
 STA SID2+[1*7]+4 
IF_1818_ELSE:
IF_1818_END:
 
IF_1822_START:
	CPY #5
	BNE IF_1822_ELSE
 STA SID2+[2*7]+4 
IF_1822_ELSE:
IF_1822_END:
 
            
IF_1789_ELSE:
IF_1789_END:
SUB_1269_END:
   rts





CALC_NEW_KEY_PRESSED:
FOR_1778_START:
	LDX #0
FOR_1778_LOOP:
      LDA LAST_KEY_STATUS,X
IF_1840_START:
	CMP #KEY_RELEASED
	BNE IF_1840_ELSE
         LDA CURR_KEY_STATUS,X         
	JMP IF_1840_END
IF_1840_ELSE:
         LDA #KEY_RELEASED         
IF_1840_END:
      STA NEW_KEY_PRESSED,X
		inx
	CPX #(SIEL_NKEYS-1)+1
	BNE FOR_1778_LOOP

FOR_1778_END:
SUB_1301_END:
   rts





PLAY_NEW_KEYS:
FOR_1795_START:
	LDX #0
FOR_1795_LOOP:
      LDA NEW_KEY_PRESSED,X
IF_1863_START:
	CMP #KEY_PRESSED
	BNE IF_1863_ELSE
         JSR PLAY_NEW_KEY_X
IF_1863_ELSE:
IF_1863_END:
		inx
	CPX #SIEL_NKEYS-1+1
	BNE FOR_1795_LOOP

FOR_1795_END:
SUB_1317_END:
   rts





PLAY_NEW_KEY_X:
   
FOR_1810_START:
	LDY #0
FOR_1810_LOOP:
      LDA STATO_VOCI,Y
IF_1884_START:
	CMP #VOICE_STOPPED
	BNE IF_1884_ELSE
         JSR PLAY_VOICE_Y_KEY_X
   rts
IF_1884_ELSE:
IF_1884_END:
		iny
	CPY #(NVOCI-1)+1
	BNE FOR_1810_LOOP

FOR_1810_END:
SUB_1330_END:
   rts

PLAY_VOICE_Y_KEY_X:
   TYA                       
   STA KEY_VOICES,X          
   
   LDA #VOICE_PLAYING        
   STA STATO_VOCI,Y          
   
   

   LDA FREQTABLE_LOW,X       
IF_1906_START:
	CPY #0
	BNE IF_1906_ELSE
 STA SID1+[0*7]+0 
IF_1906_ELSE:
IF_1906_END:
 
IF_1910_START:
	CPY #1
	BNE IF_1910_ELSE
 STA SID1+[1*7]+0 
IF_1910_ELSE:
IF_1910_END:
 
IF_1914_START:
	CPY #2
	BNE IF_1914_ELSE
 STA SID1+[2*7]+0 
IF_1914_ELSE:
IF_1914_END:
 
IF_1918_START:
	CPY #3
	BNE IF_1918_ELSE
 STA SID2+[0*7]+0 
IF_1918_ELSE:
IF_1918_END:
 
IF_1922_START:
	CPY #4
	BNE IF_1922_ELSE
 STA SID2+[1*7]+0 
IF_1922_ELSE:
IF_1922_END:
 
IF_1926_START:
	CPY #5
	BNE IF_1926_ELSE
 STA SID2+[1*7]+0 
IF_1926_ELSE:
IF_1926_END:
 

   LDA FREQTABLE_HI,X       
IF_1932_START:
	CPY #0
	BNE IF_1932_ELSE
 STA SID1+[0*7]+1 
IF_1932_ELSE:
IF_1932_END:
 
IF_1936_START:
	CPY #1
	BNE IF_1936_ELSE
 STA SID1+[1*7]+1 
IF_1936_ELSE:
IF_1936_END:
 
IF_1940_START:
	CPY #2
	BNE IF_1940_ELSE
 STA SID1+[2*7]+1 
IF_1940_ELSE:
IF_1940_END:
 
IF_1944_START:
	CPY #3
	BNE IF_1944_ELSE
 STA SID2+[0*7]+1 
IF_1944_ELSE:
IF_1944_END:
 
IF_1948_START:
	CPY #4
	BNE IF_1948_ELSE
 STA SID2+[1*7]+1 
IF_1948_ELSE:
IF_1948_END:
 
IF_1952_START:
	CPY #5
	BNE IF_1952_ELSE
 STA SID2+[1*7]+1 
IF_1952_ELSE:
IF_1952_END:
 

   

   LDA REG4                         
   ORA #1


IF_1963_START:
	CPY #0
	BNE IF_1963_ELSE
 STA SID1+[0*7]+4 
IF_1963_ELSE:
IF_1963_END:
 
IF_1967_START:
	CPY #1
	BNE IF_1967_ELSE
 STA SID1+[1*7]+4 
IF_1967_ELSE:
IF_1967_END:
 
IF_1971_START:
	CPY #2
	BNE IF_1971_ELSE
 STA SID1+[2*7]+4 
IF_1971_ELSE:
IF_1971_END:
 
IF_1975_START:
	CPY #3
	BNE IF_1975_ELSE
 STA SID2+[0*7]+4 
IF_1975_ELSE:
IF_1975_END:
 
IF_1979_START:
	CPY #4
	BNE IF_1979_ELSE
 STA SID2+[1*7]+4 
IF_1979_ELSE:
IF_1979_END:
 
IF_1983_START:
	CPY #5
	BNE IF_1983_ELSE
 STA SID2+[2*7]+4 
IF_1983_ELSE:
IF_1983_END:
 
SUB_1341_END:
   rts


COUNTER1 BYTE 0
SID1 WORD $D400
SID2 WORD $D420
REG4 BYTE 0
REG5 BYTE 0
REG6 BYTE 0